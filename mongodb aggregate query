Some mongodb aggregate query

1. // group and result in a array
db.companies.aggregate([
        {"$group" : {_id:"$founded_year", companies: {$addToSet: "$name"}}}
    ])

2. // lookup and match

db.companies.aggregate([
  {
    $lookup: {
      from: "employee",
      localField: "_id",
      foreignField: "companies_id",
      as: "employees"
    }
  },
  {$match: {employees: {$gt: [{$size: "$employees"},1]}}}
    ])

3. // lookup and unwind

db.companies.aggregate([
  {
    $lookup: {
      from: "employee",
      localField: "_id",
      foreignField: "companies_id",
      as: "employees"
    }
  },
  {
    $unwind: "$employees"
  }
    ])

4. // match, sort, and project

db.companies.aggregate([
        {$match: {"founded_year":2011}},
        {$sort: {"name": -1}},
        {$project: {"_id": 0, "name": 1}}
    ])

5. // project and match

db.companies.aggregate([
        { $project: { name:1, size_of_name: {$size: "$offices" } } },
        {$match: {"size_of_name": {$gt: 1}}}
    ])

6. // project using > and match

db.companies.aggregate([
        { $project: { name:1,  
                moreThanOne: { $gt: [ {$size: "$offices" }, 1 ] } } },
        { $match: { moreThanOne : true }} 
    ])

7.  // project using condition, if-else, <

db.companies.aggregate([
        { $project: { name:1,  
                status: {$cond: { if: { $lt: ["$founded_year",2000] }, then: "expired", else: "running" }}} }
                
    ])

8. project using condition without if-else, <

db.companies.aggregate([
        { $project: { name:1,  
                status: {$cond: [{ $lt: ["$founded_year",2000] }, "expired", "running"] }}}
                
    ])

9.  // project using >, match and group

db.companies.aggregate([
        { $project: { name:1, status: { $gt: [ "$founded_year", 2000 ] } } },
        {$match: {status: true}},
        {"$group" : {_id:"$name"}}
    ])
